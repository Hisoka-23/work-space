/*package recognition;

import java.awt.event.KeyEvent;
import java.util.Scanner;

import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.Rect;
import org.bytedeco.javacpp.opencv_core.RectVector;
import org.bytedeco.javacpp.opencv_core.Scalar;
import org.bytedeco.javacpp.opencv_core.Size;
import org.bytedeco.javacpp.opencv_imgcodecs;
import org.bytedeco.javacpp.opencv_imgproc;
import org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
import org.bytedeco.javacv.CanvasFrame;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.FrameGrabber.Exception;
import org.bytedeco.javacv.OpenCVFrameConverter;
import org.bytedeco.javacv.OpenCVFrameGrabber;

public class Catch {
	public static void main(String[] args) throws Exception, InterruptedException {
		
		KeyEvent keyboardKey = null; // catch keyborad key
		OpenCVFrameConverter.ToMat convertMat = new OpenCVFrameConverter.ToMat(); // convert image to Mat
		OpenCVFrameGrabber camera1 = new OpenCVFrameGrabber(0); // capturing webcam images

		camera1.start();

		CascadeClassifier faceDetector = new CascadeClassifier("src\\main\\java\\resources\\haarcascade_frontalface_alt2.xml");
		System.out.println("Cascade Loaded: " + !faceDetector.empty());
		CanvasFrame cFrame = new CanvasFrame("Preview", CanvasFrame.getDefaultGamma() / camera1.getGamma()); // drawing
																											 // a
																											// window
		Frame capturedFrame = camera1.grab(); // object to the captured frame
		Mat colorImage = new Mat(); // transfer from frame to color image for face detection
		int sampleNumber = 1;
		int sample = 1;

		System.out.println("Enter your ID:");
		Scanner register = new Scanner(System.in);
		int personId = register.nextInt();

		while ((capturedFrame = camera1.grab()) != null) {
			colorImage = convertMat.convert(capturedFrame);
			Mat grayImage = new Mat();
			//Contvert BGR -> grayscal
			opencv_imgproc.cvtColor(colorImage, grayImage, opencv_imgproc.COLOR_BGR2GRAY);//convert image to gray for better detection
			RectVector detectedFaces = new RectVector(); // store detected faces
			System.out.println("detectedFaces"+detectedFaces.size());
			faceDetector.detectMultiScale(grayImage, detectedFaces, 1.1, 1, 0, new Size(150, 150), new Size(500, 500));
			if (keyboardKey == null) {
				keyboardKey = cFrame.waitKey(5);
			}

			for (int i = 0; i < detectedFaces.size(); i++) { // cycle detected faces vector
				Rect faceData = detectedFaces.get(i);
				opencv_imgproc.rectangle(colorImage, faceData, new Scalar(0, 0, 255, 0)); // insert rectangle in color
																							// image
				Mat capturedface = new Mat(grayImage, faceData);
				opencv_imgproc.resize(capturedface, capturedface, new Size(160, 160));

				if (keyboardKey == null) {
					keyboardKey = cFrame.waitKey(5);
				}

				if (keyboardKey != null) {
					if (keyboardKey.getKeyChar() == 'r') {
						if (sample <= sampleNumber) {
							opencv_imgcodecs.imwrite("E:\\prakash\\WorkSpace\\New folder\\facial_recognition2\\src\\main\\java\\photos\\person." + personId + "." + sample + ".jpg",capturedface);
							System.out.println("Photo " + sample + " captured\n");
							sample++;
						}
					}//E:\prakash\WorkSpace\New folder\facial_recognition2\src\main\java\photos
					keyboardKey = null;
				}
			}

			if (keyboardKey == null) {
				keyboardKey = cFrame.waitKey(5);
			}

			if (cFrame.isVisible()) {
				cFrame.showImage(capturedFrame);
			}

			if (sample > sampleNumber) {
				break;
			}
		}
		cFrame.dispose(); // free memory
		camera1.stop();
		camera1.close();
		colorImage.close();
		register.close();
		faceDetector.close();
	}
}
*/

package recognition;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.Rect;
import org.bytedeco.javacpp.opencv_core.RectVector;
import org.bytedeco.javacpp.opencv_core.Scalar;
import org.bytedeco.javacpp.opencv_core.Size;
import org.bytedeco.javacpp.opencv_imgcodecs;
import org.bytedeco.javacpp.opencv_imgproc;
import org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
import org.bytedeco.javacv.CanvasFrame;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.OpenCVFrameConverter;
import org.bytedeco.javacv.OpenCVFrameGrabber;

public class Catch {
    public static void main(String[] args) throws Exception {
        // -------------------------
        // Config
        // -------------------------
        int sampleNumber = 30; // how many images to capture
        int sample = 1;
        // Desired save folder relative to project root
        Path photosDir = Paths.get("src", "main", "java", "photos");

        // -------------------------
        // Create photos folder if missing
        // -------------------------
        if (!Files.exists(photosDir)) {
            Files.createDirectories(photosDir);
            System.out.println("Created photos directory: " + photosDir.toAbsolutePath());
        } else {
            System.out.println("Photos directory: " + photosDir.toAbsolutePath());
        }

        // -------------------------
        // Cascade file: try common locations and classpath fallback
        // -------------------------
        String cascadeRel = "src\\main\\resources\\haarcascade_frontalface_alt2.xml";
        CascadeClassifier faceDetector = new CascadeClassifier();

        // try direct path first
        faceDetector.load(cascadeRel);
        if (faceDetector.empty()) {
            // try resources folder path variant
            String cascadeRel2 = "resources\\haarcascade_frontalface_alt2.xml";
            faceDetector.load(cascadeRel2);
        }
        if (faceDetector.empty()) {
            // try classpath resource
            try {
                String r = Catch.class.getResource("/haarcascade_frontalface_alt2.xml").getPath();
                faceDetector.load(r);
            } catch (Exception e) {
                // ignore
            }
        }

        System.out.println("Cascade loaded: " + !faceDetector.empty());
        if (faceDetector.empty()) {
            System.err.println("ERROR: Haar cascade not loaded. Put haarcascade_frontalface_alt2.xml in src/main/resources/");
            return;
        }

        // -------------------------
        // Camera + converter + preview
        // -------------------------
        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
        grabber.start();
        OpenCVFrameConverter.ToMat converter = new OpenCVFrameConverter.ToMat();
        CanvasFrame canvas = new CanvasFrame("Capture Preview", CanvasFrame.getDefaultGamma() / grabber.getGamma());
        canvas.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);

        // -------------------------
        // Ask user for ID (simple)
        // -------------------------
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter numeric person ID (e.g. 1): ");
        int personId = scanner.nextInt();
        scanner.nextLine();

        System.out.println("Starting capture. Please position your face in front of camera.");

        // -------------------------
        // Main loop
        // -------------------------
        Frame frame = null;
        Mat color = null;
        Mat gray = new Mat();

        // store a short cooldown to avoid writing multiple near-duplicate frames
        long lastSaveTime = 0;
        final long SAVE_COOLDOWN_MS = 350; // 350ms

        while ((frame = grabber.grab()) != null && sample <= sampleNumber) {
            color = converter.convert(frame);
            if (color == null || color.empty()) {
                // sometimes grab returns null — skip
                continue;
            }

            // Debug: frame size (only print occasionally)
            if (sample == 1) {
                try {
                    System.out.println("Frame size: cols=" + color.cols() + " rows=" + color.rows());
                } catch (Exception e) {
                    // ignore
                }
            }

            // Convert to grayscale (BGR -> GRAY)
            opencv_imgproc.cvtColor(color, gray, opencv_imgproc.COLOR_BGR2GRAY);
            // Optional: histogram equalization to improve detection under varying light
            opencv_imgproc.equalizeHist(gray, gray);

            // Detect faces (lower minSize to 80x80 for better chance)
            RectVector faces = new RectVector();
            faceDetector.detectMultiScale(
                    gray,
                    faces,
                    1.1,    // scaleFactor
                    3,      // minNeighbors — 3 gives a balance of detection vs false positives
                    0,
                    new Size(80, 80),    // minSize — lowered so closer/smaller faces detect
                    new Size(500, 500)   // maxSize
            );

            // Debug: how many faces in this frame
            System.out.println("Detected faces: " + faces.size() + "  (saved: " + (sample - 1) + "/" + sampleNumber + ")");

            if (faces.size() > 0) {
                // take the first detected face (faces.get(0))
                Rect r = faces.get(0);

                // draw rectangle on color image so preview shows it
                opencv_imgproc.rectangle(color, r, new Scalar(0, 0, 255, 0), 2, 8, 0);

                // extract the face from grayscale (better for recognition)
                Mat faceMat = new Mat(gray, r);
                opencv_imgproc.resize(faceMat, faceMat, new Size(160, 160));

                // save only if cooldown passed to avoid duplicates
                long now = System.currentTimeMillis();
                if (now - lastSaveTime >= SAVE_COOLDOWN_MS) {
                    String filename = photosDir.resolve("person." + personId + "." + sample + ".jpg").toString();
                    boolean ok = opencv_imgcodecs.imwrite(filename, faceMat);
                    if (ok) {
                        System.out.println("Saved: " + filename + "  [" + sample + "]");
                        sample++;
                        lastSaveTime = now;
                    } else {
                        System.err.println("Failed to save: " + filename);
                    }
                }
            }

            // show preview (convert color Mat -> Frame)
            canvas.showImage(converter.convert(color));
        }

        // -------------------------
        // Clean up
        // -------------------------
        System.out.println("Capture finished. Saved " + (sample - 1) + " images.");
        canvas.dispose();
        grabber.stop();
        grabber.close();
        if (color != null) color.close();
        scanner.close();
        faceDetector.close();
    }
}
