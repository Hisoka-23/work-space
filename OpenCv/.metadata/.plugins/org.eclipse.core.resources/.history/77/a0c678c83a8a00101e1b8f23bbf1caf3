package com.opencv.recognition;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import java.io.File;
import java.util.*;

public class FaceRecognizerOneClass {

    // Configurable paths
    private static final String CASCADE_PATH = "data/haarcascade_frontalface_default.xml"; // or alt2
    private static final String MODEL_PATH = "model/lbph.xml"; // trained model saved earlier
    private static final int FACE_W = 100;
    private static final int FACE_H = 100;
    private static final double UNKNOWN_THRESHOLD = 90.0; // tune per dataset

    private final CascadeClassifier detector;
    private final LBPHFaceRecognizer recognizer;
    private final Map<Integer, String> labelMap;

    public FaceRecognizerOneClass(Map<Integer, String> labelMap) {
        this.labelMap = new HashMap<>(labelMap);

        // Load cascade
        detector = new CascadeClassifier();
        boolean loaded = detector.load(CASCADE_PATH);
        if (!loaded) {
            throw new IllegalStateException("Failed to load cascade at " + CASCADE_PATH);
        }

        // Create and load LBPH model
        recognizer = LBPHFaceRecognizer.create(); // default params
        File modelFile = new File(MODEL_PATH);
        if (!modelFile.exists()) {
            throw new IllegalStateException("Model file not found: " + MODEL_PATH + ". Train and save it first.");
        }
        recognizer.read(modelFile.getAbsolutePath());
        // Optionally enforce threshold: recognizer.setThreshold(UNKNOWN_THRESHOLD);
    }

    // Detects faces on an input image path, recognizes each, and writes an annotated output image.
    public void recognizeOnImage(String inputPath, String outputPath) {
        Mat bgr = Imgcodecs.imread(inputPath);
        if (bgr.empty()) {
            throw new IllegalArgumentException("Cannot read image: " + inputPath);
        }

        Mat gray = new Mat();
        Imgproc.cvtColor(bgr, gray, Imgproc.COLOR_BGR2GRAY);
        Imgproc.equalizeHist(gray, gray);

        // Detect faces
        MatOfRect faces = new MatOfRect();
        int minSize = Math.round(gray.height() * 0.2f);
        detector.detectMultiScale(gray, faces, 1.1, 3, 0, new Size(minSize, minSize), new Size());

        for (Rect r : faces.toArray()) {
            // Preprocess ROI
            Mat roi = new Mat(gray, r);
            Mat norm = preprocess(roi);

            // Predict label + confidence
            int[] label = new int[1];
            double[] conf = new double[1];
            recognizer.predict(norm, label, conf);

            String name = labelMap.getOrDefault(label, "ID " + label);
            String show;
            if (conf > UNKNOWN_THRESHOLD) {
                show = "Unknown (" + String.format(Locale.US, "%.1f", conf) + ")";
            } else {
                show = name + " (" + String.format(Locale.US, "%.1f", conf) + ")";
            }

            // Draw rectangle and label
            Imgproc.rectangle(bgr, r, new Scalar(0, 255, 0), 2);
            int yText = Math.max(r.y - 10, 10);
            Imgproc.putText(bgr, show, new Point(r.x, yText), Imgproc.FONT_HERSHEY_SIMPLEX, 0.7, new Scalar(0, 255, 0), 2);

            roi.release();
            norm.release();
        }

        Imgcodecs.imwrite(outputPath, bgr);

        gray.release();
        bgr.release();
    }

    private Mat preprocess(Mat grayFace) {
        Mat resized = new Mat();
        Imgproc.resize(grayFace, resized, new Size(FACE_W, FACE_H));
        Imgproc.equalizeHist(resized, resized);
        return resized;
    }

    // Example usage: map labels to person names and run recognition on a single image
    public static void main(String[] args) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        // Map integer labels used during training to human-readable names
        Map<Integer, String> labelMap = new HashMap<>();
        labelMap.put(0, "person_1");
        labelMap.put(1, "person_2");
        labelMap.put(2, "person_3");

        FaceRecognizerOneClass app = new FaceRecognizerOneClass(labelMap);

        // Recognize faces in one image and save annotated result
        String input = "images/test.jpg";     // path to an image with a face
        String output = "images/test_out.jpg";
        app.recognizeOnImage(input, output);
        System.out.println("Annotated image written to: " + output);
    }
}
