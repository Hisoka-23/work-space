package com.faceRecogntion.FaceRecognition;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JOptionPane;

import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.Rect;
import org.bytedeco.javacpp.opencv_core.RectVector;
import org.bytedeco.javacpp.opencv_core.Scalar;
import org.bytedeco.javacpp.opencv_core.Size;
import org.bytedeco.javacpp.opencv_imgcodecs;
import org.bytedeco.javacpp.opencv_imgproc;
import org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
import org.bytedeco.javacv.CanvasFrame;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.OpenCVFrameConverter;
import org.bytedeco.javacv.OpenCVFrameGrabber;

public class Capture {
	public static void main(String[] args)  {
		
	}
	
	public void capture() throws InterruptedException, IOException {
	    String basePath = System.getProperty("user.dir");
	    String resPath = basePath + "\\src\\main\\resources";
	    String cascadePath = resPath + "\\haarcascade_frontalface_alt2.xml";
	    String photosDir = resPath + "\\photos";
	    Files.createDirectories(Paths.get(photosDir));

	    String name = JOptionPane.showInputDialog("Enter Face Name");
	    if (name == null || name.trim().isEmpty()) return;
	    String personId = JOptionPane.showInputDialog("Enter Face ID");
	    if (personId == null || personId.trim().isEmpty()) return;

	    try (BufferedWriter bw = new BufferedWriter(new FileWriter(resPath + "\\namedata.csv", true))) {
	        bw.write(personId + "," + name);
	        bw.newLine();
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	    
	    OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
	    
	    grabber.setImageWidth(640);
	    grabber.setImageHeight(480);
	    // Some cameras honor frame rate caps:
	    grabber.setFrameRate(5); // may be ignored depending on backend
	    
	    grabber.start();

	    CanvasFrame cFrame = new CanvasFrame("Capture", CanvasFrame.getDefaultGamma() / grabber.getGamma());
	    cFrame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
	    
	    OpenCVFrameConverter.ToMat converter = new OpenCVFrameConverter.ToMat();
	    CascadeClassifier faceDetector = new CascadeClassifier(cascadePath);

	    int sample = 1, sampleLimit = 100;

	    try {
	        while (cFrame.isVisible() && sample <= sampleLimit) {
	            Frame f = grabber.grab();
	            if (f == null) break;

	            Mat color = converter.convert(f);
	            if (color == null || color.empty()) {
	                cFrame.showImage(f);
	                continue;
	            }

	            Mat gray = new Mat();
	            opencv_imgproc.cvtColor(color, gray, opencv_imgproc.COLOR_BGRA2GRAY);

	            RectVector faces = new RectVector();
	            faceDetector.detectMultiScale(gray, faces, 1.1, 3, 0, new Size(160, 160), new Size(500, 500));

	            if (faces.size() > 0) {
	                Rect r = faces.get(0);
	                opencv_imgproc.rectangle(color, r, new Scalar(0, 255, 0, 0), 2, 8, 0);

	                if (sample <= sampleLimit) {
	                    Mat roi = new Mat(gray, r);
	                    Mat out = new Mat();
	                    opencv_imgproc.resize(roi, out, new Size(160, 160));
	                    String outPath = photosDir + "\\" + name + "." + personId + "." + sample + ".jpg";
	                    opencv_imgcodecs.imwrite(outPath, out);
	                    System.out.println("Photo " + sample + " captured");
	                    sample++;
	                }
	            }

	            cFrame.showImage(converter.convert(color));
	        }
	    } finally {
	        cFrame.dispose();
	        try { grabber.stop(); } catch (Throwable t) {}
	        try { grabber.close(); } catch (Throwable t) {}
	        faceDetector.close();
	    }
	}
}
