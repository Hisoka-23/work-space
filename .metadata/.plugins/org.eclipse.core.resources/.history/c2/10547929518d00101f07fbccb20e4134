package com.faceRecogntion.FaceRecognition;

import java.io.File;
import java.io.FilenameFilter;
import java.nio.IntBuffer;

import javax.swing.JOptionPane;

import org.bytedeco.javacpp.opencv_core;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.MatVector;
import org.bytedeco.javacpp.opencv_core.Size;
import org.bytedeco.javacpp.opencv_face.FaceRecognizer;
import org.bytedeco.javacpp.opencv_imgcodecs;
import org.bytedeco.javacpp.opencv_imgproc;

import static org.bytedeco.javacpp.opencv_face.createLBPHFaceRecognizer;

public class YaleTraining {
    public static void main(String[] args) {
        
    }
    
    public void yaleTraining() {
		/*
		 * File directory = new File(
		 * "E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\faces\\training"
		 * ); FilenameFilter imageFilter = new FilenameFilter() { // filter image type
		 * public boolean accept(File dir, String name) { return name.endsWith(".jpg")
		 * || name.endsWith(".gif") || name.endsWith(".png") ; } }; File[] files =
		 * directory.listFiles(imageFilter); MatVector photos = new
		 * MatVector(files.length);
		 * 
		 * Mat labels = new Mat(files.length, 1, opencv_core.CV_32SC1); IntBuffer
		 * bufferLabels = labels.createBuffer(); int counter = 0;
		 * 
		 * 
		 * for (File image : files) { Mat photo =
		 * opencv_imgcodecs.imread(image.getAbsolutePath(),
		 * opencv_imgcodecs.CV_LOAD_IMAGE_GRAYSCALE); int personId =
		 * Integer.parseInt(image.getName().substring(5,10));
		 * opencv_imgproc.resize(photo, photo, new Size(160, 160)); photos.put(counter,
		 * photo); bufferLabels.put(counter, personId); counter++; }
		 * 
		 * FaceRecognizer lbph = createLBPHFaceRecognizer(12, 10, 15, 15, 0);
		 * 
		 * lbph.train(photos, labels); lbph.save(
		 * "E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\classifierLBPH.yml"
		 * ); JOptionPane.showMessageDialog(null,
		 * "Training Complete!","FACE RECOGNITION",JOptionPane.INFORMATION_MESSAGE);
		 */
    	
    	File directory = new File("E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\faces\\training");
    	FilenameFilter imageFilter = (dir, name) -> name.endsWith(".jpg") || name.endsWith(".gif") || name.endsWith(".png");

    	File[] files = directory.listFiles(imageFilter);
    	if (files == null || files.length == 0) {
    	    throw new IllegalStateException("No training images found at: " + directory.getAbsolutePath());
    	}

    	MatVector photos = new MatVector(files.length);
    	Mat labels = new Mat(files.length, 1, opencv_core.CV_32SC1);
    	IntBuffer labelBuf = labels.getIntBuffer(); // use getIntBuffer()

    	int used = 0;
    	for (File image : files) {
    	    Mat photo = opencv_imgcodecs.imread(image.getAbsolutePath(), opencv_imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);
    	    if (photo == null || photo.empty()) {
    	        continue; // skip unreadable images
    	    }
    	    // Adjust parsing to your naming scheme; current code assumes ID at positions [5,10)
    	    int personId = Integer.parseInt(image.getName().substring(5, 10));

    	    opencv_imgproc.resize(photo, photo, new Size(160, 160));
    	    photos.put(used, photo);
    	    labelBuf.put(used, personId);
    	    used++;
    	}

    	// Ensure at least one sample and align labels to used count
    	if (used == 0) {
    	    throw new IllegalStateException("No valid training images could be loaded.");
    	}
    	if (used < files.length) {
    	    labels = labels.rowRange(0, used); // slice to match photos count
    	}

    	// Train LBPH
    	FaceRecognizer lbph = createLBPHFaceRecognizer(12, 10, 15, 15, 0);
    	lbph.train(photos, labels);
    	lbph.save("E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\classifierLBPH.yml");
    	JOptionPane.showMessageDialog(null, "Training Complete!", "FACE RECOGNITION", JOptionPane.INFORMATION_MESSAGE);

    }
}