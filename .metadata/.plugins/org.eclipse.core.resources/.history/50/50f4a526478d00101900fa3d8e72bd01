package com.faceRecogntion.FaceRecognition;

import static org.bytedeco.javacpp.opencv_face.createEigenFaceRecognizer;
import static org.bytedeco.javacpp.opencv_face.createFisherFaceRecognizer;
import static org.bytedeco.javacpp.opencv_face.createLBPHFaceRecognizer;

import java.io.File;
import java.io.FilenameFilter;
import java.nio.IntBuffer;

import javax.swing.JOptionPane;

import org.bytedeco.javacpp.opencv_core;
import org.bytedeco.javacpp.opencv_core.Mat;
import org.bytedeco.javacpp.opencv_core.MatVector;
import org.bytedeco.javacpp.opencv_core.Size;
import org.bytedeco.javacpp.opencv_face.FaceRecognizer;
import org.bytedeco.javacpp.opencv_imgcodecs;
import org.bytedeco.javacpp.opencv_imgproc;

public class Training {

	public static void main(String[] args) {
		//training();
	}
	public void training()
	{
		/*
		 * File directory = new File
		 * ("E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\photos"
		 * ); FilenameFilter imageFilter = new FilenameFilter() { // filter image type
		 * public boolean accept(File dir, String name) { return name.endsWith(".jpg")
		 * || name.endsWith(".gif") || name.endsWith(".png") ; } };
		 * 
		 * File[] files = directory.listFiles(imageFilter); // vector to store the
		 * images according to the filter MatVector photos = new
		 * MatVector(files.length); // save archived photos Mat labels = new
		 * Mat(files.length, 1 , opencv_core.CV_32SC1); //record name/labels of photos
		 * IntBuffer bufferLabels = labels.createBuffer(); //to store the labels int
		 * counter = 0; //count images
		 * 
		 * for( File image : files) { // fill in the data to train classifiers Mat photo
		 * = opencv_imgcodecs.imread(image.getAbsolutePath(),
		 * opencv_imgcodecs.CV_LOAD_IMAGE_GRAYSCALE); //take the image by name and
		 * convert to gray scale String
		 * name=image.getName().split("\\.")[0].substring(0); int personId =
		 * Integer.parseInt(image.getName().split("\\.")[1]); // search person id
		 * 
		 * opencv_imgproc.resize(photo, photo, new Size(160,160)); photos.put(counter,
		 * photo); //search photo bufferLabels.put(counter,personId); //search person id
		 * counter++; }
		 * 
		 * FaceRecognizer lbph = createLBPHFaceRecognizer();
		 * 
		 * lbph.train(photos, labels); lbph.save(
		 * "E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\classifierLBPH.yml"
		 * ); JOptionPane.showMessageDialog(null,
		 * "Training Faces Done!","FACE RECOGNITION",JOptionPane.INFORMATION_MESSAGE);
		 * 
		 */
		File dir = new File("E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\photos");
		FilenameFilter filter = (d, n) -> n.endsWith(".jpg") || n.endsWith(".gif") || n.endsWith(".png");
		File[] files = dir.listFiles(filter);
		if (files == null || files.length == 0) {
		    throw new IllegalStateException("No images found in photos directory");
		}

		// images and labels
		MatVector photos = new MatVector(files.length);
		Mat labels = new Mat(files.length, 1, opencv_core.CV_32SC1); // CV_32SC1 is required
		IntBuffer labelBuf = labels.getIntBuffer(); // use getIntBuffer view

		int count = 0;
		for (File f : files) {
		    Mat img = opencv_imgcodecs.imread(f.getAbsolutePath(), opencv_imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);
		    if (img == null || img.empty()) {
		        // skip bad image
		        continue;
		    }
		    // filename pattern assumed: name.<id>.ext
		    String[] parts = f.getName().split("\\.");
		    if (parts.length < 3) {
		        // skip if label missing
		        continue;
		    }
		    int personId = Integer.parseInt(parts[19]);

		    Mat resized = new Mat();
		    opencv_imgproc.resize(img, resized, new Size(160, 160));
		    if (resized.empty()) continue;

		    photos.put(count, resized);
		    labelBuf.put(count, personId);
		    count++;
		}

		if (count == 0) {
		    throw new IllegalStateException("No valid images loaded for training");
		}
		// If fewer than files.length were valid, slice labels to count rows
		labels = labels.rowRange(0, count);

		// Optional: require at least two distinct labels for Eigen/Fisher; LBPH can work with one, but better with >=2
		FaceRecognizer lbph = createLBPHFaceRecognizer();
		lbph.train(photos, labels);
		lbph.save("E:\\prakash\\WorkSpace\\Face-Recognition\\FaceRecognition\\src\\main\\resources\\classifierLBPH.yml");

	}
}